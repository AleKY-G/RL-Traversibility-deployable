#! /usr/bin/env python2

from __future__ import print_function, division
import numpy as np, sys, os, time, tensorboardX, copy, socket, torch, skimage, cv2, torchvision, rospy, rosbag, base64
from sensor_msgs.msg import CompressedImage
from std_msgs.msg    import String

this_dir = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(this_dir, ".."))
sys.dont_write_bytecode = True
from graph_env  import *
from policies   import *
from load_graph import *

#==============================================================================
# PARAMS

# goal location near the center of campus
GOAL_ID = "60748"

H = W = 1080
B = 5
T = 8 # thickness of lines in the plot

DO_EMPIRICAL   = True
DO_OPTIMAL     = True
DO_SIMULATION  = True

#==============================================================================
# ENVIRONMENT SETUP

env = GraphEnv(datafile        = "graphs/entire-campus.pytorch",
               vision_batch    = 128,
               shifts          = 5,
               shift_radians   = 0.07,
               stride          = 3,
               vision_init     = "places365",
               workers         = 1,
               noise_sigma     = 0.03,
               noise_theta     = 0.15,
               stutter_prob    = 0.0,
               curr_levels     = 1,
               curr_upd_int    = 1000,
               curr_thresh     = 1,
               headless        = False,
               max_variations  = -1,
               bump_penalty    = 0,
               elevator_radius = 5)
env.curriculum_level = env.curriculum_levels-1 # start hardest
_, _, prev_act, _, _ = env.reset()

#==============================================================================
# HELPERS

def draw(path, offset, color, goal_id, img=None, no_starts=False, index=None, heading=None):
    # transform node positions to workspace coordinates
    def topos(node,offset=0):
        x,y = node["pose"][0:2]
        if len(node["origin"]) == 3: dx,dy,dtheta = node["origin"]
        else: dx, dy = node["origin"]; dtheta = 0
        xr = x*np.cos(dtheta) + y*np.sin(dtheta)
        yr = x*np.cos(dtheta+np.pi/2) + y*np.sin(dtheta+np.pi/2)
        x = xr + dx; y = yr + dy
        if type(offset) is not int: offset = np.matmul(np.array([[np.cos(-dtheta), -np.sin(-dtheta)],[np.sin(-dtheta), np.cos(-dtheta)]]), offset)
        return np.array([x,y],np.float32) + offset

    # determine the size of the workspace
    poses = [topos(node) for node in env.graph["graph_nodes"].values()]
    poses = np.array(poses)
    xmn = poses[:,0].min(); xmx = poses[:,0].max(); xgp = xmx-xmn
    ymn = poses[:,1].min(); ymx = poses[:,1].max(); ygp = ymx-ymn
    if   ygp > xgp: xmn-=(ygp-xgp)/2; xmx+=(ygp-xgp)/2
    elif xgp > ygp: ymn-=(xgp-ygp)/2; ymx+=(xgp-ygp)/2
    def topix(x,y): return (int((x-xmn)/(xmx-xmn+1e-8)*(W-2*B)+B), H-int((y-ymn)/(ymx-ymn+1e-8)*(H-2*B)+B))

    def draw_map():
        img = np.full((H,W,3), 255, np.uint8)
        _connections = {}
        def connection_needed(a,b):
            ca = env.graph["graph_nodes"][str(a)]["cluster"]
            cb = env.graph["graph_nodes"][str(b)]["cluster"]
            needed = (ca,cb) not in _connections
            _connections[(ca,cb)] = True
            _connections[(cb,ca)] = True
            return needed
        # draw edges first
        for node_id,node in env.graph["graph_nodes"].items():
            for target_id,edge_type,edge_direction in node["edges"]:
                if edge_type != "nonlocal" or connection_needed(node_id,target_id):
                    p1 = topix(*topos(node)); p2 = topix(*topos(env.graph["graph_nodes"][str(target_id)]))
                    cv2.line(img, p1, p2, (192,192,192), T//4)
        # draw nodes
        for node_id,node in env.graph["graph_nodes"].items():
            cv2.circle(img, topix(*topos(node)), T//2, (192,192,192), -1)
        return img

    if img is None: img = draw_map()

    prev_pos = None
    for node_id in path:
        pos = topix(*topos(env.graph["graph_nodes"][str(node_id)], offset))
        if prev_pos is not None: cv2.line(img, prev_pos, pos, color, T)
        prev_pos = pos

    if not no_starts:
        cv2.circle(img, topix(*topos(env.graph["graph_nodes"][str(path[0])], offset)), 4*T-1,  color, -1)
        cv2.circle(img, topix(*topos(env.graph["graph_nodes"][str(path[0])], offset)), 4*T,   (0,0,0), T//2)
        if index is not None:
            pos = topix(*topos(env.graph["graph_nodes"][str(path[0])]))
            pos = (pos[0]-(7*T//4)-(index>=9)*(5*T//4), pos[1]+7*(T//4))
            cv2.putText(img, str(index+1), pos, cv2.FONT_HERSHEY_SIMPLEX, (0.7 - (index>=9)*0.1)*(T/4.0), (0,0,0), T//2)

    cv2.rectangle(img, topix(*topos(env.graph["graph_nodes"][str(goal_id)], -(7*T//4))),
                       topix(*topos(env.graph["graph_nodes"][str(goal_id)], +(7*T//4))), (0,128,255), -1)
    cv2.rectangle(img, topix(*topos(env.graph["graph_nodes"][str(goal_id)], -(7*T//4))),
                       topix(*topos(env.graph["graph_nodes"][str(goal_id)], +(7*T//4))), (0,0,0), T//2)

    cv2.putText(img, "G", topix(*topos(env.graph["graph_nodes"][str(goal_id)], [-3*T//4,-4*T//4])), cv2.FONT_HERSHEY_SIMPLEX, 1.0*T/4, (0,0,0), 3*T//4)

    if heading is not None:
        ret, baseline = cv2.getTextSize(heading, cv2.FONT_HERSHEY_SIMPLEX, 1.0*T/4, 3*T//4)
        x = img.shape[1]//2 - ret[0]//2
        cv2.putText(img, heading, (x, img.shape[0]-50), cv2.FONT_HERSHEY_SIMPLEX, 1.0*T/4, (0,0,0), 3*T//4)

    return img

#==============================================================================
# RUN

from palettable.cartocolors.qualitative import Vivid_10, Bold_10, Pastel_10, Prism_10, Safe_10
COLORS = [tuple(c) for c in Bold_10.colors + Pastel_10.colors + Prism_10.colors + Safe_10.colors]

if not os.path.exists("plots"): os.mkdir("plots")

offsets = [(np.random.random((2,))*2-1)*3*T/4 for _ in range(len(sys.argv[1:]))]

#==============================================================================
# DRAW EMPIRICAL TRAJECTORIES
#==============================================================================

if DO_EMPIRICAL:
    print("Drawing empirical trajectories")
    img = None; start_locations = []
    for i,filename in enumerate(sys.argv[1:]):
        labelled_trajectory = torch.load(filename)
        color = COLORS[i%len(COLORS)]
        offset = offsets[i]

        obs_sequence = labelled_trajectory["obs"]
        img_sequence = labelled_trajectory["img"]
        act_sequence = labelled_trajectory["act"]
        loc_sequence = labelled_trajectory["loc"]
        goal_id      = labelled_trajectory["gol"]

        img = draw(loc_sequence, offset, color, goal_id, img, no_starts=True)

        start_locations.append(loc_sequence[0])

        sole_img = draw(loc_sequence, 0, color, goal_id, img=None, no_starts=False, heading="Deployment")
        cv2.imwrite("plots/trajectory_empirical_{}.png".format(i), sole_img)

    for i,loc in enumerate(start_locations):
        img = draw([loc], np.zeros((2,)), COLORS[i%len(COLORS)], goal_id, img, index=i)

    cv2.imwrite("plots/trajectories_empirical.png", img)



#==============================================================================
# DRAW OPTIMAL TRAJECTORIES
#==============================================================================

if DO_OPTIMAL:
    print("Finding shortest paths")
    all_lengths = []; G = nx.Graph()
    for node_id,node in env.graph["graph_nodes"].items(): G.add_node(node_id)
    for node_id,node in env.graph["graph_nodes"].items():
        for (target_id,edge_type,edge_direction) in node["edges"]:
            G.add_edge(node_id, str(target_id))
            G.add_edge(str(target_id), node_id)
    paths = dict(nx.all_pairs_shortest_path(G))

    print("Drawing shortest paths")
    img = None; start_locations = []
    for i,filename in enumerate(sys.argv[1:]):
        labelled_trajectory = torch.load(filename)
        color = COLORS[i%len(COLORS)]
        offset = offsets[i]

        obs_sequence = labelled_trajectory["obs"]
        img_sequence = labelled_trajectory["img"]
        act_sequence = labelled_trajectory["act"]
        loc_sequence = labelled_trajectory["loc"]
        goal_id      = labelled_trajectory["gol"]

        img = draw(paths[str(loc_sequence[0])][str(goal_id)], offset, color, goal_id, img, no_starts=True)

        start_locations.append(loc_sequence[0])

        sole_img = draw(paths[str(loc_sequence[0])][str(goal_id)], 0, color, goal_id, img=None, no_starts=False, heading="Oracle")
        cv2.imwrite("plots/trajectory_optimal_{}.png".format(i), sole_img)

    for i,loc in enumerate(start_locations):
        img = draw([loc], np.zeros((2,)), COLORS[i%len(COLORS)], goal_id, img, index=i)

    cv2.imwrite("plots/trajectories_optimal.png", img)


#==============================================================================
# DRAW SIMULATION TRAJECTORIES
#==============================================================================


if DO_SIMULATION:
    agent = ActorCritic(obs_space     = env.observation_space,
                        act_space     = env.action_space,
                        num_locations = env.num_locations,
                        gamma         = 0.99,
                        lr            = 1e-4,
                        ent_weight    = 1e-1)

    ckpt = torch.load("checkpoints/wintermute1528108143.35_frames_observed896006400")
    agent.load_state_dict(ckpt["agent.state_dict"])

    print("Running the agent on this start/goal pair")
    img = None; start_locations = []
    for i,filename in enumerate(sys.argv[1:]):
        labelled_trajectory = torch.load(filename)
        color = COLORS[i%len(COLORS)]
        offset = offsets[i]

        obs_sequence = labelled_trajectory["obs"]
        img_sequence = labelled_trajectory["img"]
        act_sequence = labelled_trajectory["act"]
        loc_sequence = labelled_trajectory["loc"]
        goal_id      = labelled_trajectory["gol"]

        start_num = env.location_to_id[str(loc_sequence[0])]
        goal_num  = env.location_to_id[str(goal_id)]

        rstate = agent.rec(1)
        agent_loc_sequence = [loc_sequence[0]]
        agent_obs, agent_goal, agent_prev_act, agent_location, agent_goal_id = env.reset(goal_loc=goal_num, start_loc=start_num)
        while env.workers_done[0] < 0.5:
            acts, all_probs, rstate = agent.act(agent_obs, agent_goal, agent_prev_act, rstate)
            agent_obs, agent_goal, agent_prev_act, agent_rews, agent_dones, agent_diag_locs, agent_diag_goals = env.step(acts)
            env.workers_ep_limit[...] = 10000
            agent_loc_sequence.append(env.id_to_location[env.workers_location[0]])

        img = draw(agent_loc_sequence, offset, color, goal_id, img, no_starts=True)

        start_locations.append(agent_loc_sequence[0])

        sole_img = draw(agent_loc_sequence, 0, color, goal_id, img=None, no_starts=False, heading="Training")
        cv2.imwrite("plots/trajectory_simulation_{}.png".format(i), sole_img)

    for i,loc in enumerate(start_locations):
        img = draw([loc], np.zeros((2,)), COLORS[i%len(COLORS)], goal_id, img, index=i)

    cv2.imwrite("plots/trajectories_simulation.png", img)

